Building for debugging...
[0/4] Write sources
[1/4] Write swift-version--58304C5D6DBC2206.txt
[3/14] Compiling OpenAPIParserTests Test_SpokenWordService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_SpokenWordService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_SpokenWordService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[4/15] Compiling OpenAPIParserTests Test_EnsembleService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_EnsembleService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_EnsembleService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[5/15] Compiling OpenAPIParserTests Test_SessionAndContextService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_SessionAndContextService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_SessionAndContextService.swift:48:45: error: missing argument for parameter 'from' in call
46 |         do {
47 |             let parser = OpenAPIParser()
48 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
49 |             
50 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[6/15] Compiling OpenAPIParserTests Test_CharacterService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CharacterService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CharacterService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CoreScriptManagementService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CoreScriptManagementService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[7/15] Compiling OpenAPIParserTests Test_CoreScriptManagementService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CharacterService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CharacterService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CoreScriptManagementService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CoreScriptManagementService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[8/15] Compiling OpenAPIParserTests Test_PerformerService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_PerformerService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_PerformerService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
error: emit-module command failed with exit code 1 (use -v to see invocation)
[9/15] Emitting module OpenAPIParserTests
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.
[10/15] Compiling OpenAPIParserTests Test_ParaphraseService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ParaphraseService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ParaphraseService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[11/15] Compiling OpenAPIParserTests Test_ActionService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:18:30: error: type 'Bundle' has no member 'module'
16 |         // Locate and load the `Action-Service.yml` file from the resources directory.
17 |         // The file defines the API contract for the Action Service, including endpoints, schemas, and metadata.
18 |         let fileURL = Bundle.module.url(forResource: "Action-Service", withExtension: "yml")!
   |                              `- error: type 'Bundle' has no member 'module'
19 |         let specData = try String(contentsOf: fileURL, encoding: .utf8)
20 |         

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:31: error: cannot assign value of type '[String : AnyCodable]' to type 'OpenAPIDocument'
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                               `- error: cannot assign value of type '[String : AnyCodable]' to type 'OpenAPIDocument'
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:35:38: error: value of type 'PathsObject' has no member 'contains'
33 |         // The `paths` object defines the available endpoints in the API.
34 |         // Here, we assert that the `/actions` endpoint is correctly included in the parsed document.
35 |         XCTAssertTrue(document.paths.contains("/actions"), "The '/actions' endpoint is missing in the API specification.")
   |                                      `- error: value of type 'PathsObject' has no member 'contains'
36 |         
37 |         // The `components` object holds reusable definitions such as schemas.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:54:9: error: conflicting arguments to generic parameter 'T' ('SchemaType?' vs. 'String')
52 |         
53 |         // Assert that the schema type is `object`, indicating that it represents a JSON object.
54 |         XCTAssertEqual(schema.type, "object", "The 'ActionObject' schema should be of type 'object'.")
   |         `- error: conflicting arguments to generic parameter 'T' ('SchemaType?' vs. 'String')
55 |         
56 |         // Verify that the schema includes the required properties `id` and `description`.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:72:41: error: value of type '[String : AnyCodable]' has no member 'info'
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.
72 |         XCTAssertEqual(reParsedDocument.info.title, document.info.title, "The title does not match after round-trip serialization.")
   |                                         `- error: value of type '[String : AnyCodable]' has no member 'info'
73 |         
74 |         // Ensure that the endpoints (paths) remain intact and correctly parsed.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:75:41: error: value of type '[String : AnyCodable]' has no member 'paths'
73 |         
74 |         // Ensure that the endpoints (paths) remain intact and correctly parsed.
75 |         XCTAssertEqual(reParsedDocument.paths.keys, document.paths.keys, "The paths do not match after round-trip serialization.")
   |                                         `- error: value of type '[String : AnyCodable]' has no member 'paths'
76 |     }
77 | }

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:75:68: error: value of type 'PathsObject' has no member 'keys'
73 |         
74 |         // Ensure that the endpoints (paths) remain intact and correctly parsed.
75 |         XCTAssertEqual(reParsedDocument.paths.keys, document.paths.keys, "The paths do not match after round-trip serialization.")
   |                                                                    `- error: value of type 'PathsObject' has no member 'keys'
76 |     }
77 | }

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CentralSequenceService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CentralSequenceService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[12/15] Compiling OpenAPIParserTests Test_CentralSequenceService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:18:30: error: type 'Bundle' has no member 'module'
16 |         // Locate and load the `Action-Service.yml` file from the resources directory.
17 |         // The file defines the API contract for the Action Service, including endpoints, schemas, and metadata.
18 |         let fileURL = Bundle.module.url(forResource: "Action-Service", withExtension: "yml")!
   |                              `- error: type 'Bundle' has no member 'module'
19 |         let specData = try String(contentsOf: fileURL, encoding: .utf8)
20 |         

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:31: error: cannot assign value of type '[String : AnyCodable]' to type 'OpenAPIDocument'
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                               `- error: cannot assign value of type '[String : AnyCodable]' to type 'OpenAPIDocument'
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:35:38: error: value of type 'PathsObject' has no member 'contains'
33 |         // The `paths` object defines the available endpoints in the API.
34 |         // Here, we assert that the `/actions` endpoint is correctly included in the parsed document.
35 |         XCTAssertTrue(document.paths.contains("/actions"), "The '/actions' endpoint is missing in the API specification.")
   |                                      `- error: value of type 'PathsObject' has no member 'contains'
36 |         
37 |         // The `components` object holds reusable definitions such as schemas.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:54:9: error: conflicting arguments to generic parameter 'T' ('SchemaType?' vs. 'String')
52 |         
53 |         // Assert that the schema type is `object`, indicating that it represents a JSON object.
54 |         XCTAssertEqual(schema.type, "object", "The 'ActionObject' schema should be of type 'object'.")
   |         `- error: conflicting arguments to generic parameter 'T' ('SchemaType?' vs. 'String')
55 |         
56 |         // Verify that the schema includes the required properties `id` and `description`.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:72:41: error: value of type '[String : AnyCodable]' has no member 'info'
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.
72 |         XCTAssertEqual(reParsedDocument.info.title, document.info.title, "The title does not match after round-trip serialization.")
   |                                         `- error: value of type '[String : AnyCodable]' has no member 'info'
73 |         
74 |         // Ensure that the endpoints (paths) remain intact and correctly parsed.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:75:41: error: value of type '[String : AnyCodable]' has no member 'paths'
73 |         
74 |         // Ensure that the endpoints (paths) remain intact and correctly parsed.
75 |         XCTAssertEqual(reParsedDocument.paths.keys, document.paths.keys, "The paths do not match after round-trip serialization.")
   |                                         `- error: value of type '[String : AnyCodable]' has no member 'paths'
76 |     }
77 | }

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:75:68: error: value of type 'PathsObject' has no member 'keys'
73 |         
74 |         // Ensure that the endpoints (paths) remain intact and correctly parsed.
75 |         XCTAssertEqual(reParsedDocument.paths.keys, document.paths.keys, "The paths do not match after round-trip serialization.")
   |                                                                    `- error: value of type 'PathsObject' has no member 'keys'
76 |     }
77 | }

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CentralSequenceService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_CentralSequenceService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
[13/15] Compiling OpenAPIParserTests Test_StoryFactoryService.swift
/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:23:61: error: editor placeholder in source file
21 |         // Parse the YAML file into an `OpenAPIDocument` object.
22 |         // This object represents the structure and content of the OpenAPI specification.
23 |         document = try parser.parse(from: specData, format: <#String#>)
   |                                                             `- error: editor placeholder in source file
24 |     }
25 | 

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_ActionService.swift:69:55: error: editor placeholder in source file
67 |         
68 |         // Re-parse the serialized YAML string to ensure consistency with the original document.
69 |         let reParsedDocument = try parser.parse(from: <#Data#>, format: yamlString)
   |                                                       `- error: editor placeholder in source file
70 |         
71 |         // Verify that critical information, such as the title, remains unchanged after the round trip.

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_StoryFactoryService.swift:17:45: error: missing argument for parameter 'from' in call
15 |         do {
16 |             let parser = OpenAPIParser()
17 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
18 |             
19 |             // Assert the document structure

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Tests/OpenAPIParserTests/Test_StoryFactoryService.swift:47:45: error: missing argument for parameter 'from' in call
45 |         do {
46 |             let parser = OpenAPIParser()
47 |             let document = try parser.parse(from: specData)
   |                                             `- error: missing argument for parameter 'from' in call
48 |             
49 |             // Validate specific schema details

/Users/benedikteickhoff/Development/Github-Desktop/FountainAI-Swift-OpenAPI-Parser/Sources/OpenAPIParserLib/Parser/OpenAPIParser.swift:12:10: note: 'parse(from:format:)' declared here
10 | 
11 | class OpenAPIParser {
12 |     func parse(from data: Data, format: String) throws -> [String: AnyCodable] {
   |          `- note: 'parse(from:format:)' declared here
13 |         switch format {
14 |         case "json":
error: fatalError
