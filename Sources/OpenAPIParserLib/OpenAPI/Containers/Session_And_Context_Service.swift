// Auto-generated from OpenAPIYAMLContainer.swift
// This file contains the OpenAPI YAML definition for Session_And_Context_Service

import Foundation

struct Session_And_Context_Service {
    /// The OpenAPI YAML definition
    static let yaml: String = """
openapi: 3.1.0\ninfo:\n  title: Session and Context Management API\n  description: >\n    This API manages user sessions and context data for narrative elements, including characters, scripts, and paraphrases. It integrates with Character, Performer, and Core Script Management APIs to provide a cohesive storytelling experience. The ambiguity in session and context relationships fosters creative solutions.\n  version: 4.0.0\nservers:\n  - url: https://staging.session-context.fountain.coach\n    description: Staging server for Session and Context Management API\npaths:\n  /sessions:\n    get:\n      operationId: listSessions\n      summary: Retrieve all sessions\n      description: >\n        Fetches a list of all active user sessions. Can filter by context.\n      parameters:\n        - name: context\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter sessions by context description.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of sessions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Session'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createSession\n      summary: Create a new session\n      description: >\n        Creates a new user session, allowing for context data to be attached. The session will be persisted to SQLite and synchronized with Typesense for enhanced searchability.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SessionCreateRequest'\n      responses:\n        '201':\n          description: Session created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /sessions/{sessionId}:\n    get:\n      operationId: getSessionById\n      summary: Retrieve a session by ID\n      description: >\n        Retrieves a specific user session using its ID, including associated context data.\n      parameters:\n        - name: sessionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Session details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionResponse'\n        '404':\n          description: Session not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateSession\n      summary: Update a session\n      description: >\n        Updates an existing session, allowing for modifications to context data. Changes will be synchronized with Typesense.\n      parameters:\n        - name: sessionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SessionUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Session updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionResponse'\n        '400':\n          description: Invalid session input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Session not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Session:\n      type: object\n      properties:\n        sessionId:\n          type: integer\n          description: Unique identifier for the session.\n        context:\n          type: array\n          items:\n            type: string\n          description: Array of context strings for the session, which can include references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the session was created or updated.\n    SessionCreateRequest:\n      type: object\n      properties:\n        context:\n          type: array\n          items:\n            type: string\n          description: Array of context strings to attach to the new session, which can include references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation for creating the session.\n      required:\n        - context\n        - comment\n    SessionUpdateRequest:\n      type: object\n      properties:\n        context:\n          type: array\n          items:\n            type: string\n          description: Updated array of context strings for the session, including references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation for updating the session.\n      required:\n        - context\n        - comment\n    SessionResponse:\n      type: object\n      properties:\n        sessionId:\n          type: integer\n          description: Unique identifier for the session.\n        context:\n          type: array\n          items:\n            type: string\n          description: Array of context strings for the session, which can include references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the session was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
}