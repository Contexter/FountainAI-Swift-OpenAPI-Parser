// Auto-generated from OpenAPIYAMLContainer.swift
// This file contains the OpenAPI YAML definition for Character_Service

import Foundation

struct Character_Service {
    /// The OpenAPI YAML definition
    static let yaml: String = """
openapi: 3.1.0\ninfo:\n  title: Character Service\n  description: >\n    This service handles the creation, retrieval, updating, and management of characters within the story. \n    Data is persisted to SQLite and synchronized with Typesense for real-time search and retrieval.\n    The service integrates with the Central Sequence Service to ensure consistent logical flow \n    within the story. The assignment of performers to characters is left open for the calling client to manage.\n  version: 4.0.0\nservers:\n  - url: https://character.fountain.coach\n    description: Production server for Character Service\n  - url: https://staging.character.fountain.coach\n    description: Staging server for Character Service\npaths:\n  /characters:\n    get:\n      operationId: listCharacters\n      summary: Retrieve all characters\n      description: >\n        Retrieves a list of all characters stored in SQLite and synchronized with Typesense \n        for search. The Central Sequence Service ensures characters are returned in the correct sequence.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: >\n            A list of character entities from SQLite, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Character'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createCharacter\n      summary: Create a new character\n      description: >\n        Allows the creation of a new character. The data is persisted in SQLite and synchronized \n        with Typesense for search. A sequence number is generated and managed by the Central Sequence Service.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CharacterCreateRequest'\n      responses:\n        '201':\n          description: >\n            Character successfully created and stored in SQLite, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '400':\n          description: Invalid request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /characters/{characterId}:\n    get:\n      operationId: getCharacterById\n      summary: Retrieve character by ID\n      description: >\n        Retrieves a character's details by their unique ID.\n      parameters:\n        - name: characterId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the character to retrieve.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: >\n            The character details for the specified characterId.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '404':\n          description: Character not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: patchCharacter\n      summary: Partially update character details\n      description: >\n        Allows partial updates to character information, such as name or description. \n      parameters:\n        - name: characterId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the character to patch.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CharacterPatchRequest'\n      responses:\n        '200':\n          description: >\n            Character successfully updated with partial data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '400':\n          description: Invalid request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Character not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    put:\n      operationId: updateCharacter\n      summary: Fully update character details\n      description: >\n        Updates the character details completely. The data is persisted in SQLite and synchronized with Typesense.\n      parameters:\n        - name: characterId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the character to update.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CharacterUpdateRequest'\n      responses:\n        '200':\n          description: >\n            Character successfully updated with full data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '400':\n          description: Invalid request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Character not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /characters/scripts/{scriptId}:\n    get:\n      operationId: listCharactersByScript\n      summary: Retrieve characters by script\n      description: >\n        Retrieves a list of characters based on a script, stored in SQLite and synchronized \n        with Typesense for search. The Central Sequence Service ensures characters are returned in the correct sequence.\n      parameters:\n        - name: scriptId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the script to retrieve characters from.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: >\n            A list of characters for the specified script, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Character'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n  schemas:\n    Character:\n      type: object\n      properties:\n        characterId:\n          type: integer\n          description: Unique identifier for the character.\n        name:\n          type: string\n          description: The name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the story.\n        sequenceNumber:\n          type: integer\n          description: >\n            Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the character is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the character was created or updated.\n    CharacterCreateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the story.\n        comment:\n          type: string\n          description: Contextual explanation for creating the character.\n      required:\n        - name\n        - description\n        - comment\n    CharacterPatchRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The updated name of the character.\n        description:\n          type: string\n          description: The updated description of the character.\n        comment:\n          type: string\n          description: Contextual explanation for updating the character.\n      required:\n        - comment\n    CharacterUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The updated name of the character.\n        description:\n          type: string\n          description: The updated description of the character.\n        comment:\n          type: string\n          description: Contextual explanation for updating the character.\n      required:\n        - name\n        - description\n        - comment\n    CharacterResponse:\n      type: object\n      properties:\n        characterId:\n          type: integer\n          description: Unique identifier for the character.\n        name:\n          type: string\n          description: The name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the story.\n        sequenceNumber:\n          type: integer\n          description: >\n            Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the character is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the character was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n
"""
}