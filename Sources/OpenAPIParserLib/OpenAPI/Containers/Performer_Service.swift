// Auto-generated from OpenAPIYAMLContainer.swift
// This file contains the OpenAPI YAML definition for Performer_Service

import Foundation

struct Performer_Service {
    /// The OpenAPI YAML definition
    static let yaml: String = """
openapi: 3.1.0\ninfo:\n  title: Performer Service\n  description: >\n    This service handles the creation, retrieval, updating, and management of performers within the story.\n    Data is persisted to SQLite and synchronized with Typesense for real-time search and retrieval. \n    The service integrates with the Central Sequence Service to ensure consistent logical flow within the story.\n  version: 4.0.0\nservers:\n  - url: https://staging.performer.fountain.coach\n    description: Staging server for Performer Service\npaths:\n  /performers:\n    get:\n      operationId: listPerformers\n      summary: Retrieve all performers\n      description: >\n        Retrieves a list of all performers stored in SQLite and synchronized with Typesense for search. \n        The Central Sequence Service ensures performers are returned in the correct sequence.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of performer entities from SQLite, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Performer'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createPerformer\n      summary: Create a new performer\n      description: >\n        Creates a new performer entity and stores it in SQLite, synchronized with Typesense for real-time search.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PerformerCreateRequest'\n      responses:\n        '201':\n          description: Performer created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PerformerResponse'\n        '400':\n          description: Invalid input data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /performers/{performerId}:\n    get:\n      operationId: getPerformerById\n      summary: Retrieve performer by ID\n      description: >\n        Retrieves a performer by its unique ID from SQLite, synchronized with Typesense for search.\n      security:\n        - apiKeyAuth: []\n      parameters:\n        - name: performerId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Performer retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PerformerResponse'\n        '400':\n          description: Invalid performer ID.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Performer not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: patchPerformer\n      summary: Partially update performer details\n      description: >\n        Partially updates a performer's details, only applying the changes provided in the request.\n      security:\n        - apiKeyAuth: []\n      parameters:\n        - name: performerId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PerformerPatchRequest'\n      responses:\n        '200':\n          description: Performer updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PerformerResponse'\n        '400':\n          description: Invalid input data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Performer not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Performer:\n      type: object\n      properties:\n        performerId:\n          type: integer\n          description: Unique identifier for the performer.\n        name:\n          type: string\n          description: The name of the performer.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the performer is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the performer was created or updated.\n    PerformerCreateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the performer.\n        comment:\n          type: string\n          description: Contextual explanation for creating the performer.\n      required:\n        - name\n        - comment\n    PerformerPatchRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the performer.\n        comment:\n          type: string\n          description: Contextual explanation for updating the performer.\n      required:\n        - comment\n    PerformerResponse:\n      type: object\n      properties:\n        performerId:\n          type: integer\n          description: Unique identifier for the performer.\n        name:\n          type: string\n          description: The name of the performer.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the performer is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the performer was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n
"""
}