// Auto-generated from OpenAPIYAMLContainer.swift
// This file contains the OpenAPI YAML definition for Story_Factory_Service

import Foundation

struct Story_Factory_Service {
    /// The OpenAPI YAML definition
    static let yaml: String = """
openapi: 3.1.0\ninfo:\n  title: Story Factory API\n  description: >\n    This API integrates data from the Core Script Management API, Character Management API, and Session and Context Management API to assemble and manage the logical flow of stories.\n  version: 4.0.0\nservers:\n  - url: https://storyfactory.fountain.coach\n    description: Production server for Story Factory API\n  - url: https://staging.storyfactory.fountain.coach\n    description: Staging server\npaths:\n  /stories:\n    get:\n      summary: Retrieve Full Story\n      operationId: getFullStory\n      description: Fetches a complete story, including sections, characters, actions, spoken words, and context.\n      parameters:\n        - name: scriptId\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: Unique identifier of the script to retrieve the story for.\n        - name: filterByContext\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter story elements by context data. The context data can also be utilized in the Paraphrase Service for context-specific responses.\n      responses:\n        '200':\n          description: Full story retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullStory'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /stories/sequences:\n    get:\n      summary: Retrieve Story Sequences\n      operationId: getStorySequences\n      description: Retrieves specific sequences from a story, ensuring a logical flow.\n      parameters:\n        - name: scriptId\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: Unique identifier of the script to retrieve sequences for.\n        - name: startSequence\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: The starting sequence number.\n        - name: endSequence\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: The ending sequence number.\n        - name: filterByContext\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter sequences by context data. The context data can also be utilized in the Paraphrase Service for context-specific responses.\n      responses:\n        '200':\n          description: Story sequences retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorySequence'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Script or sequences not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    FullStory:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier of the script.\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        description:\n          type: string\n          description: Brief description or summary of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/SectionHeading'\n        story:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoryElement'\n        orchestration:\n          type: object\n          properties:\n            csoundFilePath:\n              type: string\n              description: Path to the generated Csound file.\n            lilyPondFilePath:\n              type: string\n              description: Path to the generated LilyPond file.\n            midiFilePath:\n              type: string\n              description: Path to the generated MIDI file.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the story was assembled or updated.\n    SectionHeading:\n      type: object\n      properties:\n        headingId:\n          type: integer\n          description: Unique identifier for the Section Heading.\n        scriptId:\n          type: integer\n          description: Identifier of the script this Section Heading belongs to.\n        title:\n          type: string\n          description: Title of the Section Heading.\n        sequence:\n          type: integer\n          description: Order sequence of the Section Heading within the script.\n    StoryElement:\n      type: object\n      properties:\n        sequence:\n          type: integer\n          description: The sequence number of the story element, ensuring the correct order.\n        character:\n          $ref: '#/components/schemas/Character'\n        action:\n          $ref: '#/components/schemas/Action'\n        spokenWord:\n          $ref: '#/components/schemas/SpokenWord'\n        context:\n          $ref: '#/components/schemas/Context'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the element is part of the story.\n    Character:\n      type: object\n      properties:\n        characterId:\n          type: integer\n          description: Unique identifier for the character.\n        name:\n          type: string\n          description: Name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the screenplay.\n    Action:\n      type: object\n      properties:\n        actionId:\n          type: integer\n          description: Unique identifier for the action.\n        description:\n          type: string\n          description: A textual description outlining what happens in this action.\n    SpokenWord:\n      type: object\n      properties:\n        dialogueId:\n          type: integer\n          description: Unique identifier for the SpokenWord entity.\n        text:\n          type: string\n          description: The dialogue text of the SpokenWord entity.\n        sequence:\n          type: integer\n          description: Order sequence of the SpokenWord within the script.\n    Context:\n      type: object\n      properties:\n        contextId:\n          type: integer\n          description: Unique identifier for the context.\n        characterId:\n          type: integer\n          description: Identifier of the character this context belongs to.\n        data:\n          type: object\n          description: Context data for the character.\n          additionalProperties:\n            type: string\n    StorySequence:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier of the script.\n        sequences:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoryElement'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the sequence was retrieved.\n    ErrorResponse:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Human-readable error message.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n
"""
}