// Auto-generated from OpenAPIYAMLContainer.swift
// This file contains the OpenAPI YAML definition for Core_Script_Managment_Service

import Foundation

struct Core_Script_Managment_Service {
    /// The OpenAPI YAML definition
    static let yaml: String = """
openapi: 3.1.0\ninfo:\n  title: Core Script Management API\n  description: >\n    This API manages scripts and their narrative elements, including retrieval by author, title, and other relevant filters. It integrates with Character and Performer Services and supports syncing with Typesense for enhanced searchability within the Story Factory context.\n  version: 4.0.0\nservers:\n  - url: https://staging.core-script.fountain.coach\n    description: Staging server for Core Script Management API\npaths:\n  /scripts:\n    get:\n      operationId: listScripts\n      summary: Retrieve all scripts\n      description: >\n        Fetches a list of all scripts available in the system. Supports filtering by author, title, character, action, and section titles.\n      parameters:\n        - name: author\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter scripts by author's name.\n        - name: title\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter scripts by title.\n        - name: characterId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter scripts by character ID.\n        - name: actionId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter scripts by action ID.\n        - name: sectionTitle\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Search for scripts containing specific section titles.\n        - name: sortBy\n          in: query\n          required: false\n          schema:\n            type: string\n            enum: [title, author]\n          description: Sort the results by title or author.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of scripts.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Script'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createScript\n      summary: Create a new script\n      description: >\n        Creates a new script, including sections. The script will be persisted to SQLite and synchronized with Typesense for enhanced searchability.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptCreateRequest'\n      responses:\n        '201':\n          description: Script created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /scripts/{scriptId}:\n    get:\n      operationId: getScriptById\n      summary: Retrieve a script by ID\n      description: >\n        Retrieves a specific script using its ID, including associated sections and characters.\n      parameters:\n        - name: scriptId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Script details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResponse'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateScript\n      summary: Update a script\n      description: >\n        Updates an existing script, allowing for modifications to sections. Changes will be synchronized with Typesense.\n      parameters:\n        - name: scriptId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Script updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResponse'\n        '400':\n          description: Invalid script input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Script:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier for the script.\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/Section'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the script was created or updated.\n    ScriptCreateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/SectionCreateRequest'\n        comment:\n          type: string\n          description: Contextual explanation for creating the script.\n      required:\n        - title\n        - author\n        - sections\n        - comment\n    ScriptUpdateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Updated title of the script.\n        author:\n          type: string\n          description: Updated author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/SectionUpdateRequest'\n        comment:\n          type: string\n          description: Contextual explanation for updating the script.\n      required:\n        - title\n        - author\n        - sections\n        - comment\n    ScriptResponse:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier for the script.\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/Section'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the script was created or updated.\n    Section:\n      type: object\n      properties:\n        sectionId:\n          type: integer\n          description: Unique identifier for the section.\n        title:\n          type: string\n          description: Title of the section.\n    SectionCreateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the section.\n      required:\n        - title\n    SectionUpdateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Updated title of the section.\n      required:\n        - title\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
}