// Auto-generated by generate_yaml_classes.swift
// This file encapsulates OpenAPI YAML specifications as Swift static properties.
import Foundation

class OpenAPIYAMLContainer {
static let action_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Action Service\n  description: >\n    This service manages actions associated with characters and spoken words within a story. Actions can be linked to specific characters, providing context to their dialogues and movements. The service supports CRUD operations on actions, ensuring that actions are properly sequenced using the Central Sequence Service.\n  version: 4.0.0\nservers:\n  - url: https://staging.action.fountain.coach\n    description: Staging server for Action Service\npaths:\n  /actions:\n    get:\n      operationId: listActions\n      summary: Retrieve all actions\n      description: >\n        Fetches a list of all actions. You can filter by character, script, section, or speech to find specific actions relevant to your narrative.\n      parameters:\n        - name: characterId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter actions by character ID.\n        - name: scriptId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter actions by script ID.\n        - name: sectionId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter actions by section ID.\n        - name: speechId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter actions by speech ID.\n        - name: keyword\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Search for actions containing specific keywords or phrases.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of actions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Action'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createAction\n      summary: Create a new action\n      description: >\n        Creates a new action associated with a character. The action will be persisted to SQLite and synchronized with Typesense.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionCreateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '201':\n          description: Action created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActionResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /actions/{actionId}:\n    get:\n      operationId: getActionById\n      summary: Retrieve an action by ID\n      description: >\n        Retrieves a specific action using its ID, along with its associated metadata.\n      parameters:\n        - name: actionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Action details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Action'\n        '404':\n          description: Action not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateAction\n      summary: Update an action\n      description: >\n        Updates an existing action associated with a character. You can modify the action's description.\n      parameters:\n        - name: actionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ActionUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Action updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ActionResponse'\n        '400':\n          description: Invalid action input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Action not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    delete:\n      operationId: deleteAction\n      summary: Delete an action\n      description: >\n        Deletes an action by its ID.\n      parameters:\n        - name: actionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '204':\n          description: Action deleted successfully.\n        '404':\n          description: Action not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Action:\n      type: object\n      properties:\n        actionId:\n          type: integer\n          description: Unique identifier for the action.\n        description:\n          type: string\n          description: A textual description outlining what happens in this action.\n        characterId:\n          type: integer\n          description: ID of the character associated with this action.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service to maintain order.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the action is being taken.\n    ActionCreateRequest:\n      type: object\n      properties:\n        description:\n          type: string\n          description: A textual description outlining what happens in this action.\n        characterId:\n          type: integer\n          description: ID of the character associated with this action.\n        comment:\n          type: string\n          description: Contextual explanation for creating the action.\n      required:\n        - description\n        - characterId\n    ActionUpdateRequest:\n      type: object\n      properties:\n        description:\n          type: string\n          description: Updated description of the action.\n        comment:\n          type: string\n          description: Contextual explanation for updating the action.\n      required:\n        - description\n    ActionResponse:\n      type: object\n      properties:\n        actionId:\n          type: integer\n          description: Unique identifier for the action.\n        description:\n          type: string\n          description: A textual description outlining what happens in this action.\n        characterId:\n          type: integer\n          description: ID of the character associated with this action.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service to maintain order.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the action is being taken.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
static let story_factory_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Story Factory API\n  description: >\n    This API integrates data from the Core Script Management API, Character Management API, and Session and Context Management API to assemble and manage the logical flow of stories.\n  version: 4.0.0\nservers:\n  - url: https://storyfactory.fountain.coach\n    description: Production server for Story Factory API\n  - url: https://staging.storyfactory.fountain.coach\n    description: Staging server\npaths:\n  /stories:\n    get:\n      summary: Retrieve Full Story\n      operationId: getFullStory\n      description: Fetches a complete story, including sections, characters, actions, spoken words, and context.\n      parameters:\n        - name: scriptId\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: Unique identifier of the script to retrieve the story for.\n        - name: filterByContext\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter story elements by context data. The context data can also be utilized in the Paraphrase Service for context-specific responses.\n      responses:\n        '200':\n          description: Full story retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/FullStory'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /stories/sequences:\n    get:\n      summary: Retrieve Story Sequences\n      operationId: getStorySequences\n      description: Retrieves specific sequences from a story, ensuring a logical flow.\n      parameters:\n        - name: scriptId\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: Unique identifier of the script to retrieve sequences for.\n        - name: startSequence\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: The starting sequence number.\n        - name: endSequence\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: The ending sequence number.\n        - name: filterByContext\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter sequences by context data. The context data can also be utilized in the Paraphrase Service for context-specific responses.\n      responses:\n        '200':\n          description: Story sequences retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StorySequence'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '404':\n          description: Script or sequences not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    FullStory:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier of the script.\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        description:\n          type: string\n          description: Brief description or summary of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/SectionHeading'\n        story:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoryElement'\n        orchestration:\n          type: object\n          properties:\n            csoundFilePath:\n              type: string\n              description: Path to the generated Csound file.\n            lilyPondFilePath:\n              type: string\n              description: Path to the generated LilyPond file.\n            midiFilePath:\n              type: string\n              description: Path to the generated MIDI file.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the story was assembled or updated.\n    SectionHeading:\n      type: object\n      properties:\n        headingId:\n          type: integer\n          description: Unique identifier for the Section Heading.\n        scriptId:\n          type: integer\n          description: Identifier of the script this Section Heading belongs to.\n        title:\n          type: string\n          description: Title of the Section Heading.\n        sequence:\n          type: integer\n          description: Order sequence of the Section Heading within the script.\n    StoryElement:\n      type: object\n      properties:\n        sequence:\n          type: integer\n          description: The sequence number of the story element, ensuring the correct order.\n        character:\n          $ref: '#/components/schemas/Character'\n        action:\n          $ref: '#/components/schemas/Action'\n        spokenWord:\n          $ref: '#/components/schemas/SpokenWord'\n        context:\n          $ref: '#/components/schemas/Context'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the element is part of the story.\n    Character:\n      type: object\n      properties:\n        characterId:\n          type: integer\n          description: Unique identifier for the character.\n        name:\n          type: string\n          description: Name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the screenplay.\n    Action:\n      type: object\n      properties:\n        actionId:\n          type: integer\n          description: Unique identifier for the action.\n        description:\n          type: string\n          description: A textual description outlining what happens in this action.\n    SpokenWord:\n      type: object\n      properties:\n        dialogueId:\n          type: integer\n          description: Unique identifier for the SpokenWord entity.\n        text:\n          type: string\n          description: The dialogue text of the SpokenWord entity.\n        sequence:\n          type: integer\n          description: Order sequence of the SpokenWord within the script.\n    Context:\n      type: object\n      properties:\n        contextId:\n          type: integer\n          description: Unique identifier for the context.\n        characterId:\n          type: integer\n          description: Identifier of the character this context belongs to.\n        data:\n          type: object\n          description: Context data for the character.\n          additionalProperties:\n            type: string\n    StorySequence:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier of the script.\n        sequences:\n          type: array\n          items:\n            $ref: '#/components/schemas/StoryElement'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the sequence was retrieved.\n    ErrorResponse:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Human-readable error message.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n
"""
static let core_script_managment_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Core Script Management API\n  description: >\n    This API manages scripts and their narrative elements, including retrieval by author, title, and other relevant filters. It integrates with Character and Performer Services and supports syncing with Typesense for enhanced searchability within the Story Factory context.\n  version: 4.0.0\nservers:\n  - url: https://staging.core-script.fountain.coach\n    description: Staging server for Core Script Management API\npaths:\n  /scripts:\n    get:\n      operationId: listScripts\n      summary: Retrieve all scripts\n      description: >\n        Fetches a list of all scripts available in the system. Supports filtering by author, title, character, action, and section titles.\n      parameters:\n        - name: author\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter scripts by author's name.\n        - name: title\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter scripts by title.\n        - name: characterId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter scripts by character ID.\n        - name: actionId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter scripts by action ID.\n        - name: sectionTitle\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Search for scripts containing specific section titles.\n        - name: sortBy\n          in: query\n          required: false\n          schema:\n            type: string\n            enum: [title, author]\n          description: Sort the results by title or author.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of scripts.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Script'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createScript\n      summary: Create a new script\n      description: >\n        Creates a new script, including sections. The script will be persisted to SQLite and synchronized with Typesense for enhanced searchability.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptCreateRequest'\n      responses:\n        '201':\n          description: Script created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /scripts/{scriptId}:\n    get:\n      operationId: getScriptById\n      summary: Retrieve a script by ID\n      description: >\n        Retrieves a specific script using its ID, including associated sections and characters.\n      parameters:\n        - name: scriptId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Script details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResponse'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateScript\n      summary: Update a script\n      description: >\n        Updates an existing script, allowing for modifications to sections. Changes will be synchronized with Typesense.\n      parameters:\n        - name: scriptId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ScriptUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Script updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ScriptResponse'\n        '400':\n          description: Invalid script input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Script:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier for the script.\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/Section'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the script was created or updated.\n    ScriptCreateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/SectionCreateRequest'\n        comment:\n          type: string\n          description: Contextual explanation for creating the script.\n      required:\n        - title\n        - author\n        - sections\n        - comment\n    ScriptUpdateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Updated title of the script.\n        author:\n          type: string\n          description: Updated author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/SectionUpdateRequest'\n        comment:\n          type: string\n          description: Contextual explanation for updating the script.\n      required:\n        - title\n        - author\n        - sections\n        - comment\n    ScriptResponse:\n      type: object\n      properties:\n        scriptId:\n          type: integer\n          description: Unique identifier for the script.\n        title:\n          type: string\n          description: Title of the script.\n        author:\n          type: string\n          description: Author of the script.\n        sections:\n          type: array\n          items:\n            $ref: '#/components/schemas/Section'\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the script was created or updated.\n    Section:\n      type: object\n      properties:\n        sectionId:\n          type: integer\n          description: Unique identifier for the section.\n        title:\n          type: string\n          description: Title of the section.\n    SectionCreateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Title of the section.\n      required:\n        - title\n    SectionUpdateRequest:\n      type: object\n      properties:\n        title:\n          type: string\n          description: Updated title of the section.\n      required:\n        - title\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
static let ensemble_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: FountainAI Ensemble Service\n  description: This OpenAPI specification defines the endpoints for the FountainAI Ensemble Service, which acts as an intermediary between users, the OpenAI Assistant, and FountainAI services managed via Kong. All FountainAI services are routed and orchestrated through Kong API Gateway, providing centralized management and control. Kong's rerouting capabilities are leveraged to distribute user input dynamically across multiple services, enabling flexible interaction flows and the implementation of the mediator design pattern for efficient delegation and aggregation of responses.\n  version: 1.1.0\nservers:\n  - url: https://localhost\n    description: Local server for testing and development\npaths:\n  /gui/overview:\n    get:\n      summary: Retrieve overview data\n      description: Retrieves overview data for services, routes, consumers, and plugins from Kong.\n      operationId: retrieveGuiOverview\n      responses:\n        '200':\n          description: Overview data retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  services:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: The ID of the Kong service\n                        name:\n                          type: string\n                          description: The name of the Kong service\n                  routes:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: The ID of the Kong route\n                        paths:\n                          type: array\n                          items:\n                            type: string\n                          description: The paths configured for the route\n                  consumers:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: The ID of the Kong consumer\n                        username:\n                          type: string\n                          description: The username of the Kong consumer\n                  plugins:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: The ID of the Kong plugin\n                        name:\n                          type: string\n                          description: The name of the plugin\n        '500':\n          description: Internal server error\n\n  /gui/metrics:\n    get:\n      summary: Retrieve metrics data\n      description: Retrieves metrics for services and consumers in Kong.\n      operationId: retrieveGuiMetrics\n      responses:\n        '200':\n          description: Metrics retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  service_metrics:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        service_id:\n                          type: string\n                          description: The ID of the Kong service\n                        status:\n                          type: string\n                          description: The status of the service (e.g., active, degraded, down)\n                  consumer_metrics:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        consumer_id:\n                          type: string\n                          description: The ID of the consumer\n                        requests_handled:\n                          type: integer\n                          description: Number of requests handled by this consumer\n        '500':\n          description: Internal server error\n\n  /kong/consumers:\n    get:\n      summary: Retrieve list of Kong consumers\n      description: Retrieves the list of consumers configured in the Kong API Gateway.\n      operationId: listKongConsumers\n      responses:\n        '200':\n          description: Kong consumers retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the Kong consumer\n                    username:\n                      type: string\n                      description: The username of the Kong consumer\n        '500':\n          description: Internal server error\n    post:\n      summary: Create a new Kong consumer\n      description: Creates a new consumer in the Kong API Gateway.\n      operationId: createKongConsumer\n      requestBody:\n        description: Details of the Kong consumer to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  description: The username of the consumer\n                custom_id:\n                  type: string\n                  description: A custom identifier for the consumer\n      responses:\n        '201':\n          description: Kong consumer created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the newly created Kong consumer\n        '400':\n          description: Bad request - Invalid consumer data provided\n        '500':\n          description: Internal server error\n\n  /kong/consumers/{consumerId}:\n    patch:\n      summary: Update an existing Kong consumer\n      description: Updates details of a specific Kong consumer by ID.\n      operationId: updateKongConsumer\n      parameters:\n        - name: consumerId\n          in: path\n          required: true\n          description: The ID of the Kong consumer to update\n          schema:\n            type: string\n      requestBody:\n        description: Details of the Kong consumer to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                username:\n                  type: string\n                  description: The new username of the consumer\n                custom_id:\n                  type: string\n                  description: The new custom identifier for the consumer\n      responses:\n        '200':\n          description: Kong consumer updated successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the updated Kong consumer\n        '400':\n          description: Bad request - Invalid consumer data provided\n        '404':\n          description: Consumer not found\n        '500':\n          description: Internal server error\n    delete:\n      summary: Delete a Kong consumer\n      description: Deletes a specific Kong consumer by ID.\n      operationId: deleteKongConsumer\n      parameters:\n        - name: consumerId\n          in: path\n          required: true\n          description: The ID of the Kong consumer to delete\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Kong consumer deleted successfully\n        '404':\n          description: Consumer not found\n        '500':\n          description: Internal server error\n\n  /kong/certificates:\n    get:\n      summary: Retrieve list of Kong certificates\n      description: Retrieves the list of SSL certificates configured in the Kong API Gateway.\n      operationId: listKongCertificates\n      responses:\n        '200':\n          description: Kong certificates retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the certificate\n                    cert:\n                      type: string\n                      description: The public certificate\n        '500':\n          description: Internal server error\n    post:\n      summary: Create a new SSL certificate\n      description: Creates a new SSL certificate in the Kong API Gateway.\n      operationId: createKongCertificate\n      requestBody:\n        description: Details of the SSL certificate to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                cert:\n                  type: string\n                  description: The public certificate\n                key:\n                  type: string\n                  description: The private key\n      responses:\n        '201':\n          description: SSL certificate created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the newly created certificate\n        '400':\n          description: Bad request - Invalid certificate data provided\n        '500':\n          description: Internal server error\n\n  /kong/upstreams:\n    get:\n      summary: Retrieve list of Kong upstreams\n      description: Retrieves the list of upstreams configured in the Kong API Gateway for load balancing.\n      operationId: listKongUpstreams\n      responses:\n        '200':\n          description: Kong upstreams retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the upstream\n                    name:\n                      type: string\n                      description: The name of the upstream\n        '500':\n          description: Internal server error\n    post:\n      summary: Create a new Kong upstream\n      description: Creates a new upstream in the Kong API Gateway.\n      operationId: createKongUpstream\n      requestBody:\n        description: Details of the upstream to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The name of the upstream\n      responses:\n        '201':\n          description: Kong upstream created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the newly created upstream\n        '400':\n          description: Bad request - Invalid upstream data provided\n        '500':\n          description: Internal server error\n\n  /kong/upstreams/{upstreamId}/targets:\n    get:\n      summary: Retrieve list of targets for an upstream\n      description: Retrieves the list of targets associated with a specific upstream in the Kong API Gateway.\n      operationId: listKongUpstreamTargets\n      parameters:\n        - name: upstreamId\n          in: path\n          required: true\n          description: The ID of the upstream to retrieve targets for\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Kong targets retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the target\n                    target:\n                      type: string\n                      description: The address of the target (e.g., IP:port)\n        '404':\n          description: Upstream not found\n        '500':\n          description: Internal server error\n\n  /kong/routes:\n    get:\n      summary: Retrieve list of Kong routes\n      description: Retrieves the list of routes configured in the Kong API Gateway.\n      operationId: listKongRoutes\n      responses:\n        '200':\n          description: Kong routes retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the Kong route\n                    service:\n                      type: string\n                      description: The associated service ID\n                    paths:\n                      type: array\n                      items:\n                        type: string\n                      description: The paths configured for the route\n        '500':\n          description: Internal server error\n    post:\n      summary: Create a new Kong route\n      description: Creates a new route in the Kong API Gateway.\n      operationId: createKongRoute\n      requestBody:\n        description: Details of the Kong route to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                service_id:\n                  type: string\n                  description: The ID of the service to associate the route with\n                paths:\n                  type: array\n                  items:\n                    type: string\n                  description: The paths to be routed\n      responses:\n        '201':\n          description: Kong route created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the newly created Kong route\n        '400':\n          description: Bad request - Invalid route data provided\n        '500':\n          description: Internal server error\n\n  /kong/routes/{routeId}:\n    patch:\n      summary: Update an existing Kong route\n      description: Updates details of a specific Kong route by ID.\n      operationId: updateKongRoute\n      parameters:\n        - name: routeId\n          in: path\n          required: true\n          description: The ID of the Kong route to update\n          schema:\n            type: string\n      requestBody:\n        description: Details of the Kong route to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                paths:\n                  type: array\n                  items:\n                    type: string\n                  description: The new paths to be routed\n      responses:\n        '200':\n          description: Kong route updated successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the updated Kong route\n        '400':\n          description: Bad request - Invalid route data provided\n        '404':\n          description: Route not found\n        '500':\n          description: Internal server error\n    delete:\n      summary: Delete a Kong route\n      description: Deletes a specific Kong route by ID.\n      operationId: deleteKongRoute\n      parameters:\n        - name: routeId\n          in: path\n          required: true\n          description: The ID of the Kong route to delete\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Kong route deleted successfully\n        '404':\n          description: Route not found\n        '500':\n          description: Internal server error\n\n  /kong/plugins:\n    get:\n      summary: Retrieve list of Kong plugins\n      description: Retrieves the list of plugins configured in the Kong API Gateway.\n      operationId: listKongPlugins\n      responses:\n        '200':\n          description: Kong plugins retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the Kong plugin\n                    name:\n                      type: string\n                      description: The name of the Kong plugin\n        '500':\n          description: Internal server error\n    post:\n      summary: Create a new Kong plugin\n      description: Creates a new plugin in the Kong API Gateway.\n      operationId: createKongPlugin\n      requestBody:\n        description: Details of the Kong plugin to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The name of the plugin\n                config:\n                  type: object\n                  description: Configuration for the plugin\n      responses:\n        '201':\n          description: Kong plugin created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the newly created Kong plugin\n        '400':\n          description: Bad request - Invalid plugin data provided\n        '500':\n          description: Internal server error\n\n  /kong/plugins/{pluginId}:\n    delete:\n      summary: Delete a Kong plugin\n      description: Deletes a specific Kong plugin by ID.\n      operationId: deleteKongPlugin\n      parameters:\n        - name: pluginId\n          in: path\n          required: true\n          description: The ID of the Kong plugin to delete\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Kong plugin deleted successfully\n        '404':\n          description: Plugin not found\n        '500':\n          description: Internal server error\n\n  /kong/services:\n    post:\n      summary: Create a new Kong service\n      description: Creates a new service in the Kong API Gateway.\n      operationId: createKongService\n      requestBody:\n        description: Details of the Kong service to be created\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The name of the service\n                url:\n                  type: string\n                  description: The URL of the upstream service\n      responses:\n        '201':\n          description: Kong service created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the newly created Kong service\n        '400':\n          description: Bad request - Invalid service data provided\n        '500':\n          description: Internal server error\n    get:\n      summary: Retrieve list of Kong services\n      description: Retrieves the list of services configured in the Kong API Gateway.\n      operationId: listKongServices\n      responses:\n        '200':\n          description: Kong services retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    id:\n                      type: string\n                      description: The ID of the Kong service\n                    name:\n                      type: string\n                      description: The name of the Kong service\n        '500':\n          description: Internal server error\n\n  /kong/services/{serviceId}:\n    patch:\n      summary: Update an existing Kong service\n      description: Updates details of a specific Kong service by ID.\n      operationId: updateKongService\n      parameters:\n        - name: serviceId\n          in: path\n          required: true\n          description: The ID of the Kong service to update\n          schema:\n            type: string\n      requestBody:\n        description: Details of the Kong service to be updated\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                name:\n                  type: string\n                  description: The new name of the service\n                url:\n                  type: string\n                  description: The new URL of the upstream service\n      responses:\n        '200':\n          description: Kong service updated successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  id:\n                    type: string\n                    description: The ID of the updated Kong service\n        '400':\n          description: Bad request - Invalid service data provided\n        '404':\n          description: Service not found\n        '500':\n          description: Internal server error\n    delete:\n      summary: Delete a Kong service\n      description: Deletes a specific Kong service by ID.\n      operationId: deleteKongService\n      parameters:\n        - name: serviceId\n          in: path\n          required: true\n          description: The ID of the Kong service to delete\n          schema:\n            type: string\n      responses:\n        '204':\n          description: Kong service deleted successfully\n        '404':\n          description: Service not found\n        '500':\n          description: Internal server error\n\n  /system-prompt:\n    get:\n      summary: Generate system prompt for the Assistant\n      description: Generates a system prompt for the Assistant by integrating specified FountainAI services that are managed through Kong, ensuring the Assistant fully understands the capabilities and interactions within a Kong-managed ecosystem.\n      operationId: generateSystemPrompt\n      parameters:\n        - name: services\n          in: query\n          description: List of FountainAI services to include in the system prompt\n          required: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        '200':\n          description: System prompt generated successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  system_prompt:\n                    type: string\n                    description: The generated system prompt for the Assistant\n        '400':\n          description: Bad request - Invalid service list provided\n        '500':\n          description: Internal server error\n\n  /interact:\n    post:\n      summary: Handle user input and manage interaction\n      description: Handles user input by delegating requests to relevant FountainAI services for efficient processing.\n      operationId: handleUserInteraction\n      requestBody:\n        description: User input to be processed by the Assistant\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                user_input:\n                  type: string\n                  description: The user's query or command\n                system_prompt:\n                  type: string\n                  description: The system prompt to use for managing the interaction\n      responses:\n        '200':\n          description: Interaction handled successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  assistant_response:\n                    type: string\n                    description: The Assistant's response to the user input\n                  service_responses:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        service_name:\n                          type: string\n                          description: The name of the FountainAI service invoked\n                        response:\n                          type: array\n                          items:\n                            type: string\n                          description: The responses from the invoked service\n        '400':\n          description: Bad request - Invalid user input\n        '500':\n          description: Internal server error\n\n  /logs:\n    get:\n      summary: Retrieve interaction logs\n      description: Retrieves logs of interactions, including user inputs, Assistant responses, and service responses for transparency and debugging.\n      operationId: retrieveLogs\n      responses:\n        '200':\n          description: Logs retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: object\n                  properties:\n                    timestamp:\n                      type: string\n                      description: Time of interaction in ISO 8601 format\n                    user_input:\n                      type: string\n                      description: The user's input message\n                    assistant_response:\n                      type: string\n                      description: The response generated by the Assistant\n                    service_responses:\n                      type: array\n                      items:\n                        type: object\n                        properties:\n                          service_name:\n                            type: string\n                            description: The name of the service involved\n                          response:\n                            type: string\n                            description: The responses from the invoked service, which may be aggregated if multiple steps or services are involved\n        '500':\n          description: Internal server error\n\ncomponents:\n  schemas: {}\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-Key\n
"""
static let performer_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Performer Service\n  description: >\n    This service handles the creation, retrieval, updating, and management of performers within the story.\n    Data is persisted to SQLite and synchronized with Typesense for real-time search and retrieval. \n    The service integrates with the Central Sequence Service to ensure consistent logical flow within the story.\n  version: 4.0.0\nservers:\n  - url: https://staging.performer.fountain.coach\n    description: Staging server for Performer Service\npaths:\n  /performers:\n    get:\n      operationId: listPerformers\n      summary: Retrieve all performers\n      description: >\n        Retrieves a list of all performers stored in SQLite and synchronized with Typesense for search. \n        The Central Sequence Service ensures performers are returned in the correct sequence.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of performer entities from SQLite, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Performer'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createPerformer\n      summary: Create a new performer\n      description: >\n        Creates a new performer entity and stores it in SQLite, synchronized with Typesense for real-time search.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PerformerCreateRequest'\n      responses:\n        '201':\n          description: Performer created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PerformerResponse'\n        '400':\n          description: Invalid input data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /performers/{performerId}:\n    get:\n      operationId: getPerformerById\n      summary: Retrieve performer by ID\n      description: >\n        Retrieves a performer by its unique ID from SQLite, synchronized with Typesense for search.\n      security:\n        - apiKeyAuth: []\n      parameters:\n        - name: performerId\n          in: path\n          required: true\n          schema:\n            type: integer\n      responses:\n        '200':\n          description: Performer retrieved successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PerformerResponse'\n        '400':\n          description: Invalid performer ID.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Performer not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: patchPerformer\n      summary: Partially update performer details\n      description: >\n        Partially updates a performer's details, only applying the changes provided in the request.\n      security:\n        - apiKeyAuth: []\n      parameters:\n        - name: performerId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/PerformerPatchRequest'\n      responses:\n        '200':\n          description: Performer updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/PerformerResponse'\n        '400':\n          description: Invalid input data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Performer not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Performer:\n      type: object\n      properties:\n        performerId:\n          type: integer\n          description: Unique identifier for the performer.\n        name:\n          type: string\n          description: The name of the performer.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the performer is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the performer was created or updated.\n    PerformerCreateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the performer.\n        comment:\n          type: string\n          description: Contextual explanation for creating the performer.\n      required:\n        - name\n        - comment\n    PerformerPatchRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: Name of the performer.\n        comment:\n          type: string\n          description: Contextual explanation for updating the performer.\n      required:\n        - comment\n    PerformerResponse:\n      type: object\n      properties:\n        performerId:\n          type: integer\n          description: Unique identifier for the performer.\n        name:\n          type: string\n          description: The name of the performer.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the performer is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the performer was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n
"""
static let central_sequence_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Central Sequence Service API\n  description: >\n    This API manages the assignment and updating of sequence numbers for various elements within a story, ensuring logical order and consistency. The service persists data to an SQLite database, which is then synchronized with Typesense for real-time search and retrieval capabilities.\n  version: 4.0.0\nservers:\n  - url: https://centralsequence.fountain.coach\n    description: Production server for Central Sequence Service API\n  - url: https://staging.centralsequence.fountain.coach\n    description: Staging server\npaths:\n  /sequence:\n    post:\n      summary: Generate Sequence Number\n      operationId: generateSequenceNumber\n      tags:\n        - Sequence Management\n      description: Generates a new sequence number for a specified element type, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.\n      requestBody:\n        required: true\n        description: Details of the element requesting a sequence number.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SequenceRequest'\n      responses:\n        '201':\n          description: Sequence number successfully generated and synchronized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SequenceResponse'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '502':\n          description: Failed to synchronize with Typesense.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TypesenseErrorResponse'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /sequence/reorder:\n    put:\n      summary: Reorder Elements\n      operationId: reorderElements\n      tags:\n        - Sequence Management\n      description: Reorders elements by updating their sequence numbers, persists the changes to an SQLite database, and synchronizes the changes with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.\n      requestBody:\n        required: true\n        description: Details of the reordering request.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ReorderRequest'\n      responses:\n        '200':\n          description: Elements successfully reordered and synchronized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ReorderResponse'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '502':\n          description: Failed to synchronize with Typesense.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TypesenseErrorResponse'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n  /sequence/version:\n    post:\n      summary: Create New Version\n      operationId: createVersion\n      tags:\n        - Version Management\n      description: Creates a new version of an element, persists it to an SQLite database, and synchronizes it with Typesense. If synchronization with Typesense fails, a retry mechanism will be triggered automatically.\n      requestBody:\n        required: true\n        description: Details of the versioning request.\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/VersionRequest'\n      responses:\n        '201':\n          description: New version successfully created and synchronized.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/VersionResponse'\n        '400':\n          description: Invalid request parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        '502':\n          description: Failed to synchronize with Typesense.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/TypesenseErrorResponse'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\ncomponents:\n  schemas:\n    SequenceRequest:\n      description: Schema representing a request to generate a new sequence number\n      type: object\n      properties:\n        elementType:\n          type: string\n          description: Type of the element (e.g., script, section, character, action, spokenWord).\n          enum: [script, section, character, action, spokenWord]\n        elementId:\n          type: integer\n          description: Unique identifier of the element.\n          minimum: 1\n        comment:\n          type: string\n          description: Contextual explanation for generating the sequence number.\n      required: [elementType, elementId, comment]\n    SequenceResponse:\n      description: Schema representing the response with a generated sequence number\n      type: object\n      properties:\n        sequenceNumber:\n          type: integer\n          description: The generated sequence number.\n          minimum: 1\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the sequence number was generated.\n    ReorderRequest:\n      description: Schema representing a request to reorder elements\n      type: object\n      properties:\n        elementType:\n          type: string\n          description: Type of elements being reordered.\n          enum: [script, section, character, action, spokenWord]\n        elements:\n          type: array\n          items:\n            type: object\n            properties:\n              elementId:\n                type: integer\n                description: Unique identifier of the element.\n                minimum: 1\n              newSequence:\n                type: integer\n                description: New sequence number for the element.\n                minimum: 1\n        comment:\n          type: string\n          description: Contextual explanation for reordering the elements.\n      required: [elementType, elements, comment]\n    ReorderResponse:\n      description: Schema representing the response after reordering elements\n      type: object\n      properties:\n        updatedElements:\n          type: array\n          items:\n            type: object\n            properties:\n              elementId:\n                type: integer\n                description: Unique identifier of the element.\n              newSequence:\n                type: integer\n                description: Updated sequence number.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the elements were reordered.\n    VersionRequest:\n      description: Schema representing a request to create a new version of an element\n      type: object\n      properties:\n        elementType:\n          type: string\n          description: Type of the element (e.g., script, section, character, action, spokenWord).\n          enum: [script, section, character, action, spokenWord]\n        elementId:\n          type: integer\n          description: Unique identifier of the element.\n          minimum: 1\n        newVersionData:\n          type: object\n          description: Data for the new version of the element.\n        comment:\n          type: string\n          description: Contextual explanation for creating the new version.\n      required: [elementType, elementId, newVersionData, comment]\n    VersionResponse:\n      description: Schema representing the response with the new version number\n      type: object\n      properties:\n        versionNumber:\n          type: integer\n          description: The version number of the new version.\n          minimum: 1\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the new version was created.\n    SuccessResponse:\n      type: object\n      properties:\n        message:\n          type: string\n          description: Success message.\n    ErrorResponse:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Human-readable error message.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n    TypesenseErrorResponse:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Error code related to Typesense synchronization.\n        retryAttempt:\n          type: integer\n          description: Number of retry attempts made to synchronize with Typesense.\n        message:\n          type: string\n          description: Human-readable error message.\n        details:\n          type: string\n          description: Additional information about the Typesense error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
static let session_and_context_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Session and Context Management API\n  description: >\n    This API manages user sessions and context data for narrative elements, including characters, scripts, and paraphrases. It integrates with Character, Performer, and Core Script Management APIs to provide a cohesive storytelling experience. The ambiguity in session and context relationships fosters creative solutions.\n  version: 4.0.0\nservers:\n  - url: https://staging.session-context.fountain.coach\n    description: Staging server for Session and Context Management API\npaths:\n  /sessions:\n    get:\n      operationId: listSessions\n      summary: Retrieve all sessions\n      description: >\n        Fetches a list of all active user sessions. Can filter by context.\n      parameters:\n        - name: context\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Filter sessions by context description.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of sessions.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Session'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createSession\n      summary: Create a new session\n      description: >\n        Creates a new user session, allowing for context data to be attached. The session will be persisted to SQLite and synchronized with Typesense for enhanced searchability.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SessionCreateRequest'\n      responses:\n        '201':\n          description: Session created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /sessions/{sessionId}:\n    get:\n      operationId: getSessionById\n      summary: Retrieve a session by ID\n      description: >\n        Retrieves a specific user session using its ID, including associated context data.\n      parameters:\n        - name: sessionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Session details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionResponse'\n        '404':\n          description: Session not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateSession\n      summary: Update a session\n      description: >\n        Updates an existing session, allowing for modifications to context data. Changes will be synchronized with Typesense.\n      parameters:\n        - name: sessionId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/SessionUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Session updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/SessionResponse'\n        '400':\n          description: Invalid session input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Session not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Session:\n      type: object\n      properties:\n        sessionId:\n          type: integer\n          description: Unique identifier for the session.\n        context:\n          type: array\n          items:\n            type: string\n          description: Array of context strings for the session, which can include references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the session was created or updated.\n    SessionCreateRequest:\n      type: object\n      properties:\n        context:\n          type: array\n          items:\n            type: string\n          description: Array of context strings to attach to the new session, which can include references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation for creating the session.\n      required:\n        - context\n        - comment\n    SessionUpdateRequest:\n      type: object\n      properties:\n        context:\n          type: array\n          items:\n            type: string\n          description: Updated array of context strings for the session, including references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation for updating the session.\n      required:\n        - context\n        - comment\n    SessionResponse:\n      type: object\n      properties:\n        sessionId:\n          type: integer\n          description: Unique identifier for the session.\n        context:\n          type: array\n          items:\n            type: string\n          description: Array of context strings for the session, which can include references to paraphrases.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the session was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
static let spoken_word_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Spoken Word Service\n  description: >\n    This service manages lines of spoken words within a story, allowing for intuitive retrieval based on context. Lines are grouped into speeches and can be interspersed with actions. The service supports CRUD operations on lines, which are synchronized with Typesense for searchability. You can utilize this API to reason about dialogues in your interactions with users.\n  version: 4.0.0\nservers:\n  - url: https://staging.spokenword.fountain.coach\n    description: Staging server for Spoken Word Service\npaths:\n  /lines:\n    get:\n      operationId: listLines\n      summary: Retrieve lines based on context\n      description: >\n        Fetches lines of spoken words based on context from the Story Factory API. You can filter by character, speech, section, and keywords to assist in your reasoning.\n      parameters:\n        - name: scriptId\n          in: query\n          required: true\n          schema:\n            type: integer\n          description: Unique identifier of the script.\n        - name: characterId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter lines by character ID.\n        - name: speechId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter lines by speech ID.\n        - name: sectionId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter lines by section ID.\n        - name: actionId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter lines by associated action ID.\n        - name: keyword\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Search for lines containing specific keywords or phrases.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of spoken lines.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Line'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createLine\n      summary: Create a new line\n      description: >\n        Creates a new line of spoken words within a speech. The line will be persisted to SQLite and synchronized with Typesense.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LineCreateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '201':\n          description: Line created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /lines/{lineId}:\n    get:\n      operationId: getLineById\n      summary: Retrieve a line by ID\n      description: >\n        Retrieves a specific line of spoken words using its ID, along with its assigned metadata and sequence number.\n      parameters:\n        - name: lineId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Line details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineResponse'\n        '404':\n          description: Line not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateLine\n      summary: Update a line\n      description: >\n        Updates an existing line of spoken words. You can modify the line's content, and its sequence number can be reassigned via the Central Sequence Service if needed.\n      parameters:\n        - name: lineId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/LineUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Line updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/LineResponse'\n        '400':\n          description: Invalid line input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Line not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Line:\n      type: object\n      properties:\n        lineId:\n          type: integer\n          description: Unique identifier for the line.\n        speechId:\n          type: integer\n          description: ID of the speech this line belongs to.\n        characterId:\n          type: integer\n          description: ID of the character delivering this line.\n        content:\n          type: string\n          description: The content of the line.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service to maintain order.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the line was created or updated.\n    LineCreateRequest:\n      type: object\n      properties:\n        speechId:\n          type: integer\n          description: ID of the speech this line will be part of.\n        characterId:\n          type: integer\n          description: ID of the character delivering this line.\n        content:\n          type: string\n          description: Content of the line to be created.\n        comment:\n          type: string\n          description: Contextual explanation for creating the line.\n      required:\n        - speechId\n        - characterId\n        - content\n        - comment\n    LineUpdateRequest:\n      type: object\n      properties:\n        content:\n          type: string\n          description: Updated content of the line.\n        comment:\n          type: string\n          description: Contextual explanation for updating the line.\n      required:\n        - content\n        - comment\n    LineResponse:\n      type: object\n      properties:\n        lineId:\n          type: integer\n          description: Unique identifier for the line.\n        speechId:\n          type: integer\n          description: ID of the speech this line belongs to.\n        characterId:\n          type: integer\n          description: ID of the character delivering this line.\n        content:\n          type: string\n          description: The content of the line.\n        sequenceNumber:\n          type: integer\n          description: Sequence number assigned by the Central Sequence Service to maintain order.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the line was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
static let paraphrase_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Paraphrase Service\n  description: >\n    This service manages paraphrases associated with characters, actions, and spoken words within a story. It allows for creating, retrieving, updating, and deleting paraphrases, providing context to the original dialogues and actions. Each paraphrase is synced with Typesense for enhanced searchability.\n  version: 4.0.0\nservers:\n  - url: https://staging.paraphrase.fountain.coach\n    description: Staging server for Paraphrase Service\npaths:\n  /paraphrases:\n    get:\n      operationId: listParaphrases\n      summary: Retrieve all paraphrases\n      description: >\n        Fetches a list of all paraphrases. You can filter by character, action, or spoken word to find specific paraphrases relevant to your narrative.\n      parameters:\n        - name: characterId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter paraphrases by character ID.\n        - name: actionId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter paraphrases by action ID.\n        - name: spokenWordId\n          in: query\n          required: false\n          schema:\n            type: integer\n          description: Filter paraphrases by spoken word ID.\n        - name: keyword\n          in: query\n          required: false\n          schema:\n            type: string\n          description: Search for paraphrases containing specific keywords or phrases.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: A list of paraphrases.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Paraphrase'\n        '400':\n          description: Invalid query parameters.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createParaphrase\n      summary: Create a new paraphrase\n      description: >\n        Creates a new paraphrase associated with a character, action, or spoken word. The paraphrase will be persisted to SQLite and synchronized with Typesense for enhanced searchability.\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ParaphraseCreateRequest'\n      responses:\n        '201':\n          description: Paraphrase created successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParaphraseResponse'\n        '400':\n          description: Invalid input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /paraphrases/{paraphraseId}:\n    get:\n      operationId: getParaphraseById\n      summary: Retrieve a paraphrase by ID\n      description: >\n        Retrieves a specific paraphrase using its ID, along with its associated metadata.\n      parameters:\n        - name: paraphraseId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Paraphrase details.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParaphraseResponse'\n        '404':\n          description: Paraphrase not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: updateParaphrase\n      summary: Update a paraphrase\n      description: >\n        Updates an existing paraphrase associated with a character, action, or spoken word. You can modify the text and commentary. The updated paraphrase will also be synchronized with Typesense.\n      parameters:\n        - name: paraphraseId\n          in: path\n          required: true\n          schema:\n            type: integer\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/ParaphraseUpdateRequest'\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: Paraphrase updated successfully.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ParaphraseResponse'\n        '400':\n          description: Invalid paraphrase input.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Paraphrase not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    delete:\n      operationId: deleteParaphrase\n      summary: Delete a paraphrase\n      description: >\n        Deletes a paraphrase by its ID. The deletion will also be reflected in the Typesense synchronization.\n      parameters:\n        - name: paraphraseId\n          in: path\n          required: true\n          schema:\n            type: integer\n      security:\n        - apiKeyAuth: []\n      responses:\n        '204':\n          description: Paraphrase deleted successfully.\n        '404':\n          description: Paraphrase not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  schemas:\n    Paraphrase:\n      type: object\n      properties:\n        paraphraseId:\n          type: integer\n          description: Unique identifier for the paraphrase.\n        originalId:\n          type: integer\n          description: Identifier of the original entity this paraphrase is linked to.\n        text:\n          type: string\n          description: The text of the paraphrase.\n        commentary:\n          type: string\n          description: Reasons explaining why this paraphrase is as it is.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the paraphrase was created or updated.\n    ParaphraseCreateRequest:\n      type: object\n      properties:\n        originalId:\n          type: integer\n          description: Identifier of the original entity this paraphrase is linked to.\n        text:\n          type: string\n          description: The text of the paraphrase.\n        commentary:\n          type: string\n          description: Reasons explaining why this paraphrase is as it is.\n        comment:\n          type: string\n          description: Contextual explanation for creating the paraphrase.\n      required:\n        - originalId\n        - text\n        - commentary\n        - comment\n    ParaphraseUpdateRequest:\n      type: object\n      properties:\n        text:\n          type: string\n          description: Updated text of the paraphrase.\n        commentary:\n          type: string\n          description: Reasons explaining why this paraphrase is as it is.\n        comment:\n          type: string\n          description: Contextual explanation for updating the paraphrase.\n      required:\n        - text\n        - commentary\n        - comment\n    ParaphraseResponse:\n      type: object\n      properties:\n        paraphraseId:\n          type: integer\n          description: Unique identifier for the paraphrase.\n        originalId:\n          type: integer\n          description: Identifier of the original entity this paraphrase is linked to.\n        text:\n          type: string\n          description: The text of the paraphrase.\n        commentary:\n          type: string\n          description: Reasons explaining why this paraphrase is as it is.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the paraphrase was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error encountered.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\nsecurity:\n  - apiKeyAuth: []\n
"""
static let character_service_yml: String = """
openapi: 3.1.0\ninfo:\n  title: Character Service\n  description: >\n    This service handles the creation, retrieval, updating, and management of characters within the story. \n    Data is persisted to SQLite and synchronized with Typesense for real-time search and retrieval.\n    The service integrates with the Central Sequence Service to ensure consistent logical flow \n    within the story. The assignment of performers to characters is left open for the calling client to manage.\n  version: 4.0.0\nservers:\n  - url: https://character.fountain.coach\n    description: Production server for Character Service\n  - url: https://staging.character.fountain.coach\n    description: Staging server for Character Service\npaths:\n  /characters:\n    get:\n      operationId: listCharacters\n      summary: Retrieve all characters\n      description: >\n        Retrieves a list of all characters stored in SQLite and synchronized with Typesense \n        for search. The Central Sequence Service ensures characters are returned in the correct sequence.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: >\n            A list of character entities from SQLite, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Character'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    post:\n      operationId: createCharacter\n      summary: Create a new character\n      description: >\n        Allows the creation of a new character. The data is persisted in SQLite and synchronized \n        with Typesense for search. A sequence number is generated and managed by the Central Sequence Service.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CharacterCreateRequest'\n      responses:\n        '201':\n          description: >\n            Character successfully created and stored in SQLite, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '400':\n          description: Invalid request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /characters/{characterId}:\n    get:\n      operationId: getCharacterById\n      summary: Retrieve character by ID\n      description: >\n        Retrieves a character's details by their unique ID.\n      parameters:\n        - name: characterId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the character to retrieve.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: >\n            The character details for the specified characterId.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '404':\n          description: Character not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    patch:\n      operationId: patchCharacter\n      summary: Partially update character details\n      description: >\n        Allows partial updates to character information, such as name or description. \n      parameters:\n        - name: characterId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the character to patch.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CharacterPatchRequest'\n      responses:\n        '200':\n          description: >\n            Character successfully updated with partial data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '400':\n          description: Invalid request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Character not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n    put:\n      operationId: updateCharacter\n      summary: Fully update character details\n      description: >\n        Updates the character details completely. The data is persisted in SQLite and synchronized with Typesense.\n      parameters:\n        - name: characterId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the character to update.\n      security:\n        - apiKeyAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/CharacterUpdateRequest'\n      responses:\n        '200':\n          description: >\n            Character successfully updated with full data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CharacterResponse'\n        '400':\n          description: Invalid request data.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '404':\n          description: Character not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n        '500':\n          description: >\n            Internal server error.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\n  /characters/scripts/{scriptId}:\n    get:\n      operationId: listCharactersByScript\n      summary: Retrieve characters by script\n      description: >\n        Retrieves a list of characters based on a script, stored in SQLite and synchronized \n        with Typesense for search. The Central Sequence Service ensures characters are returned in the correct sequence.\n      parameters:\n        - name: scriptId\n          in: path\n          required: true\n          schema:\n            type: integer\n          description: The ID of the script to retrieve characters from.\n      security:\n        - apiKeyAuth: []\n      responses:\n        '200':\n          description: >\n            A list of characters for the specified script, synchronized with Typesense.\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Character'\n        '404':\n          description: Script not found.\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/StandardError'\ncomponents:\n  securitySchemes:\n    apiKeyAuth:\n      type: apiKey\n      in: header\n      name: X-API-KEY\n  schemas:\n    Character:\n      type: object\n      properties:\n        characterId:\n          type: integer\n          description: Unique identifier for the character.\n        name:\n          type: string\n          description: The name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the story.\n        sequenceNumber:\n          type: integer\n          description: >\n            Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the character is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the character was created or updated.\n    CharacterCreateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the story.\n        comment:\n          type: string\n          description: Contextual explanation for creating the character.\n      required:\n        - name\n        - description\n        - comment\n    CharacterPatchRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The updated name of the character.\n        description:\n          type: string\n          description: The updated description of the character.\n        comment:\n          type: string\n          description: Contextual explanation for updating the character.\n      required:\n        - comment\n    CharacterUpdateRequest:\n      type: object\n      properties:\n        name:\n          type: string\n          description: The updated name of the character.\n        description:\n          type: string\n          description: The updated description of the character.\n        comment:\n          type: string\n          description: Contextual explanation for updating the character.\n      required:\n        - name\n        - description\n        - comment\n    CharacterResponse:\n      type: object\n      properties:\n        characterId:\n          type: integer\n          description: Unique identifier for the character.\n        name:\n          type: string\n          description: The name of the character.\n        description:\n          type: string\n          description: A brief description of the character and their role within the story.\n        sequenceNumber:\n          type: integer\n          description: >\n            Sequence number assigned by the Central Sequence Service.\n        isSyncedToTypesense:\n          type: boolean\n          description: Indicates whether the character is synchronized with Typesense.\n        comment:\n          type: string\n          description: Contextual explanation generated dynamically by the GPT model, explaining why the character was created or updated.\n    StandardError:\n      type: object\n      properties:\n        errorCode:\n          type: string\n          description: Application-specific error code.\n        message:\n          type: string\n          description: Description of the error.\n        details:\n          type: string\n          description: Additional information about the error, if available.\n
"""
}
